// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package netinit100

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sealedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_sfc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_driver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_evmWriter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initializeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506123a7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806329e83e2914610030575b600080fd5b610098600480360361010081101561004757600080fd5b5080359060208101359073ffffffffffffffffffffffffffffffffffffffff60408201358116916060810135821691608082013581169160a081013582169160c082013581169160e001351661009a565b005b604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152848116602483015291519185169163485cc9559160448082019260009290919082900301818387803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b5050604080517fc0c53b8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152878116602483015285811660448301529151918816935063c0c53b8b925060648082019260009290919082900301818387803b1580156101ac57600080fd5b505af11580156101c0573d6000803e3d6000fd5b5050505060006040516101d290610a67565b604051809103906000f0801580156101ee573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663866c4b1769152d02c7e14af68000006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166381ffcdf16102ea610a5b565b6010026040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561032357600080fd5b505af1158015610337573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ee711326064610361610a5b565b600f028161036b57fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632bb9fe8d60646103e0610a5b565b601402816103ea57fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561042157600080fd5b505af1158015610435573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f8d5177e606461045f610a5b565b600a028161046957fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16637945ef9960646104de610a5b565b601e02816104e857fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663bf25338b621275006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561058d57600080fd5b505af11580156105a1573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ad7b3f7b6301e133806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638f078bfa60036040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663455366a462093a806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663b6d9edd560006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16636348ebb8620697806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632e84e8e66103e86040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561081d57600080fd5b505af1158015610831573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166343326867621e84806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d3f48dbe610e106040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b5050604080517f10e51e14000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c905273ffffffffffffffffffffffffffffffffffffffff89811660448301528a81166064830152858116608483015286811660a48301529151918b1693506310e51e14925060c48082019260009290919082900301818387803b158015610a3e57600080fd5b505af1158015610a52573d6000803e3d6000fd5b50600092505050ff5b670de0b6b3a764000090565b6118fe80610a758339019056fe608060405234801561001057600080fd5b506118de806100206000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80638129fc1c11610145578063b6d9edd5116100bd578063c74dd6211161008c578063d9a7c1f911610071578063d9a7c1f9146104bc578063f2fde38b146104c4578063f8d5177e146104f757610240565b8063c74dd62114610497578063d3f48dbe1461049f57610240565b8063b6d9edd51461044d578063b82b84271461046a578063bf25338b14610472578063c5f530af1461048f57610240565b80638f078bfa1161011457806394c3e914116100f957806394c3e91414610420578063a778651514610428578063ad7b3f7b1461043057610240565b80638f078bfa146103e75780638f32d59b1461040457610240565b80638129fc1c1461037457806381ffcdf11461037c578063866c4b17146103995780638da5cb5b146103b657610240565b80633a3ef66c116101d85780635e2308d2116101a7578063650acd661161018c578063650acd6614610347578063715018a61461034f5780637945ef991461035757610240565b80635e2308d2146103225780636348ebb81461032a57610240565b80633a3ef66c146102d857806343326867146102e0578063455366a4146102fd5780635a68f01a1461031a57610240565b80632bb9fe8d116102145780632bb9fe8d146102775780632c8c36a5146102965780632e84e8e61461029e5780632ee71132146102bb57610240565b8062cc7f83146102455780630d4955e31461025f5780630d7b2609146102675780632265f2841461026f575b600080fd5b61024d610514565b60408051918252519081900360200190f35b61024d61051a565b61024d610520565b61024d610526565b6102946004803603602081101561028d57600080fd5b503561052c565b005b61024d6105f0565b610294600480360360208110156102b457600080fd5b50356105f6565b610294600480360360208110156102d157600080fd5b5035610702565b61024d6107c6565b610294600480360360208110156102f657600080fd5b50356107cc565b6102946004803603602081101561031357600080fd5b50356108db565b61024d610991565b61024d610997565b6102946004803603602081101561034057600080fd5b503561099d565b61024d610aab565b610294610ab1565b6102946004803603602081101561036d57600080fd5b5035610b79565b610294610ca6565b6102946004803603602081101561039257600080fd5b5035610da9565b610294600480360360208110156103af57600080fd5b5035610ec2565b6103be610fdf565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610294600480360360208110156103fd57600080fd5b5035610ffb565b61040c611105565b604080519115158252519081900360200190f35b61024d611123565b61024d611129565b6102946004803603602081101561044657600080fd5b503561112f565b6102946004803603602081101561046357600080fd5b503561123e565b61024d61129c565b6102946004803603602081101561048857600080fd5b50356112a2565b61024d6113b0565b61024d6113b6565b610294600480360360208110156104b557600080fd5b50356113bc565b61024d6114c8565b610294600480360360208110156104da57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114ce565b6102946004803603602081101561050d57600080fd5b5035611530565b60725481565b606d5481565b606c5481565b60675481565b610534611105565b610585576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600261058f6115f4565b8161059657fe5b048111156105eb576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606955565b60745481565b6105fe611105565b61064f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60648110156106a5576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620f42408111156106fd576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607155565b61070a611105565b61075b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60026107656115f4565b8161076c57fe5b048111156107c1576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606855565b60735481565b6107d4611105565b610825576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620f424081101561087d576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b631dcd65008111156108d6576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607355565b6108e3611105565b610934576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62278d0081111561098c576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606f55565b60715481565b606b5481565b6109a5611105565b6109f6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62015180811015610a4e576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620d2f00811115610aa6576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607255565b606e5481565b610ab9611105565b610b0a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610b81611105565b610bd2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6064610bdc6115f4565b60050281610be657fe5b04811015610c3b576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6002610c456115f4565b81610c4c57fe5b04811115610ca1576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606b55565b600054610100900460ff1680610cbf5750610cbf611600565b80610ccd575060005460ff16155b610d085760405162461bcd60e51b815260040180806020018281038252602e81526020018061187c602e913960400191505060405180910390fd5b600054610100900460ff16158015610d6e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610d7733611606565b8015610da657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610db1611105565b610e02576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610e0a6115f4565b811015610e5e576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b610e666115f4565b601f02811115610ebd576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606755565b610eca611105565b610f1b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b69152d02c7e14af6800000811015610f7a576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6a084595161401484a000000811115610fda576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606655565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b611003611105565b611054576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60028110156110aa576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6064811115611100576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606e55565b60335473ffffffffffffffffffffffffffffffffffffffff16331490565b606a5481565b60685481565b611137611105565b611188576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62278d008110156111e0576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b630784ce00811115611239576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606d55565b611246611105565b611297576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b607055565b606f5481565b6112aa611105565b6112fb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62015180811015611353576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b62278d008111156113ab576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606c55565b60665481565b60695481565b6113c4611105565b611415576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606481101561146b576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620d2f008111156114c3576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607455565b60705481565b6114d6611105565b611527576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610da681611775565b611538611105565b611589576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60026115936115f4565b8161159a57fe5b048111156115ef576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606a55565b670de0b6b3a764000090565b303b1590565b600054610100900460ff168061161f575061161f611600565b8061162d575060005460ff16155b6116685760405162461bcd60e51b815260040180806020018281038252602e81526020018061187c602e913960400191505060405180910390fd5b600054610100900460ff161580156116ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561177157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b73ffffffffffffffffffffffffffffffffffffffff81166117c75760405162461bcd60e51b81526004018080602001828103825260268152602001806118566026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820c5b474302ae1d42e17797c97323c5eaac4e94b7063dad94a09e4fdecd31d59d564736f6c63430005110032a265627a7a7231582059b98a21a63bdecd842e619964a74ed1f7674c27bcbdd1392be10e9722b0768564736f6c63430005110032",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// InitializeAll is a paid mutator transaction binding the contract method 0x29e83e29.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _lib, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractTransactor) InitializeAll(opts *bind.TransactOpts, sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _lib common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "initializeAll", sealedEpoch, totalSupply, _sfc, _lib, _auth, _driver, _evmWriter, _owner)
}

// InitializeAll is a paid mutator transaction binding the contract method 0x29e83e29.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _lib, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractSession) InitializeAll(sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _lib common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.InitializeAll(&_Contract.TransactOpts, sealedEpoch, totalSupply, _sfc, _lib, _auth, _driver, _evmWriter, _owner)
}

// InitializeAll is a paid mutator transaction binding the contract method 0x29e83e29.
//
// Solidity: function initializeAll(uint256 sealedEpoch, uint256 totalSupply, address _sfc, address _lib, address _auth, address _driver, address _evmWriter, address _owner) returns()
func (_Contract *ContractTransactorSession) InitializeAll(sealedEpoch *big.Int, totalSupply *big.Int, _sfc common.Address, _lib common.Address, _auth common.Address, _driver common.Address, _evmWriter common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.InitializeAll(&_Contract.TransactOpts, sealedEpoch, totalSupply, _sfc, _lib, _auth, _driver, _evmWriter, _owner)
}

var ContractBinRuntime = "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806329e83e2914610030575b600080fd5b610098600480360361010081101561004757600080fd5b5080359060208101359073ffffffffffffffffffffffffffffffffffffffff60408201358116916060810135821691608082013581169160a081013582169160c082013581169160e001351661009a565b005b604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152848116602483015291519185169163485cc9559160448082019260009290919082900301818387803b15801561011357600080fd5b505af1158015610127573d6000803e3d6000fd5b5050604080517fc0c53b8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152878116602483015285811660448301529151918816935063c0c53b8b925060648082019260009290919082900301818387803b1580156101ac57600080fd5b505af11580156101c0573d6000803e3d6000fd5b5050505060006040516101d290610a67565b604051809103906000f0801580156101ee573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663866c4b1769152d02c7e14af68000006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166381ffcdf16102ea610a5b565b6010026040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561032357600080fd5b505af1158015610337573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ee711326064610361610a5b565b600f028161036b57fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632bb9fe8d60646103e0610a5b565b601402816103ea57fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561042157600080fd5b505af1158015610435573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f8d5177e606461045f610a5b565b600a028161046957fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16637945ef9960646104de610a5b565b601e02816104e857fe5b046040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663bf25338b621275006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561058d57600080fd5b505af11580156105a1573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ad7b3f7b6301e133806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638f078bfa60036040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663455366a462093a806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663b6d9edd560006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16636348ebb8620697806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632e84e8e66103e86040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561081d57600080fd5b505af1158015610831573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166343326867621e84806040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561088b57600080fd5b505af115801561089f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d3f48dbe610e106040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b5050604080517f10e51e14000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c905273ffffffffffffffffffffffffffffffffffffffff89811660448301528a81166064830152858116608483015286811660a48301529151918b1693506310e51e14925060c48082019260009290919082900301818387803b158015610a3e57600080fd5b505af1158015610a52573d6000803e3d6000fd5b50600092505050ff5b670de0b6b3a764000090565b6118fe80610a758339019056fe608060405234801561001057600080fd5b506118de806100206000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80638129fc1c11610145578063b6d9edd5116100bd578063c74dd6211161008c578063d9a7c1f911610071578063d9a7c1f9146104bc578063f2fde38b146104c4578063f8d5177e146104f757610240565b8063c74dd62114610497578063d3f48dbe1461049f57610240565b8063b6d9edd51461044d578063b82b84271461046a578063bf25338b14610472578063c5f530af1461048f57610240565b80638f078bfa1161011457806394c3e914116100f957806394c3e91414610420578063a778651514610428578063ad7b3f7b1461043057610240565b80638f078bfa146103e75780638f32d59b1461040457610240565b80638129fc1c1461037457806381ffcdf11461037c578063866c4b17146103995780638da5cb5b146103b657610240565b80633a3ef66c116101d85780635e2308d2116101a7578063650acd661161018c578063650acd6614610347578063715018a61461034f5780637945ef991461035757610240565b80635e2308d2146103225780636348ebb81461032a57610240565b80633a3ef66c146102d857806343326867146102e0578063455366a4146102fd5780635a68f01a1461031a57610240565b80632bb9fe8d116102145780632bb9fe8d146102775780632c8c36a5146102965780632e84e8e61461029e5780632ee71132146102bb57610240565b8062cc7f83146102455780630d4955e31461025f5780630d7b2609146102675780632265f2841461026f575b600080fd5b61024d610514565b60408051918252519081900360200190f35b61024d61051a565b61024d610520565b61024d610526565b6102946004803603602081101561028d57600080fd5b503561052c565b005b61024d6105f0565b610294600480360360208110156102b457600080fd5b50356105f6565b610294600480360360208110156102d157600080fd5b5035610702565b61024d6107c6565b610294600480360360208110156102f657600080fd5b50356107cc565b6102946004803603602081101561031357600080fd5b50356108db565b61024d610991565b61024d610997565b6102946004803603602081101561034057600080fd5b503561099d565b61024d610aab565b610294610ab1565b6102946004803603602081101561036d57600080fd5b5035610b79565b610294610ca6565b6102946004803603602081101561039257600080fd5b5035610da9565b610294600480360360208110156103af57600080fd5b5035610ec2565b6103be610fdf565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610294600480360360208110156103fd57600080fd5b5035610ffb565b61040c611105565b604080519115158252519081900360200190f35b61024d611123565b61024d611129565b6102946004803603602081101561044657600080fd5b503561112f565b6102946004803603602081101561046357600080fd5b503561123e565b61024d61129c565b6102946004803603602081101561048857600080fd5b50356112a2565b61024d6113b0565b61024d6113b6565b610294600480360360208110156104b557600080fd5b50356113bc565b61024d6114c8565b610294600480360360208110156104da57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114ce565b6102946004803603602081101561050d57600080fd5b5035611530565b60725481565b606d5481565b606c5481565b60675481565b610534611105565b610585576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600261058f6115f4565b8161059657fe5b048111156105eb576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606955565b60745481565b6105fe611105565b61064f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60648110156106a5576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620f42408111156106fd576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607155565b61070a611105565b61075b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60026107656115f4565b8161076c57fe5b048111156107c1576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606855565b60735481565b6107d4611105565b610825576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b620f424081101561087d576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b631dcd65008111156108d6576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607355565b6108e3611105565b610934576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62278d0081111561098c576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606f55565b60715481565b606b5481565b6109a5611105565b6109f6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62015180811015610a4e576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620d2f00811115610aa6576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607255565b606e5481565b610ab9611105565b610b0a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610b81611105565b610bd2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6064610bdc6115f4565b60050281610be657fe5b04811015610c3b576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6002610c456115f4565b81610c4c57fe5b04811115610ca1576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606b55565b600054610100900460ff1680610cbf5750610cbf611600565b80610ccd575060005460ff16155b610d085760405162461bcd60e51b815260040180806020018281038252602e81526020018061187c602e913960400191505060405180910390fd5b600054610100900460ff16158015610d6e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610d7733611606565b8015610da657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610db1611105565b610e02576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610e0a6115f4565b811015610e5e576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b610e666115f4565b601f02811115610ebd576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606755565b610eca611105565b610f1b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b69152d02c7e14af6800000811015610f7a576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6a084595161401484a000000811115610fda576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606655565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b611003611105565b611054576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60028110156110aa576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b6064811115611100576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606e55565b60335473ffffffffffffffffffffffffffffffffffffffff16331490565b606a5481565b60685481565b611137611105565b611188576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62278d008110156111e0576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b630784ce00811115611239576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606d55565b611246611105565b611297576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b607055565b606f5481565b6112aa611105565b6112fb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b62015180811015611353576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b62278d008111156113ab576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606c55565b60665481565b60695481565b6113c4611105565b611415576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606481101561146b576040805162461bcd60e51b815260206004820152600f60248201527f746f6f20736d616c6c2076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b620d2f008111156114c3576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b607455565b60705481565b6114d6611105565b611527576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610da681611775565b611538611105565b611589576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60026115936115f4565b8161159a57fe5b048111156115ef576040805162461bcd60e51b815260206004820152600f60248201527f746f6f206c617267652076616c75650000000000000000000000000000000000604482015290519081900360640190fd5b606a55565b670de0b6b3a764000090565b303b1590565b600054610100900460ff168061161f575061161f611600565b8061162d575060005460ff16155b6116685760405162461bcd60e51b815260040180806020018281038252602e81526020018061187c602e913960400191505060405180910390fd5b600054610100900460ff161580156116ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3801561177157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b73ffffffffffffffffffffffffffffffffffffffff81166117c75760405162461bcd60e51b81526004018080602001828103825260268152602001806118566026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820c5b474302ae1d42e17797c97323c5eaac4e94b7063dad94a09e4fdecd31d59d564736f6c63430005110032a265627a7a7231582059b98a21a63bdecd842e619964a74ed1f7674c27bcbdd1392be10e9722b0768564736f6c63430005110032"
